{"version":3,"file":"static/js/8980.b4b863be.chunk.js","mappings":"2JAIA,MAgBA,EAhBsBA,IAAA,IAAC,MAAEC,EAAK,YAAEC,EAAW,SAAEC,GAAUH,EAAA,OACrDI,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAAAF,SAAA,EACLG,EAAAA,EAAAA,KAAA,SAAAH,SAAQF,KACRK,EAAAA,EAAAA,KAAA,QAAMC,KAAK,cAAcC,QAASN,OAEnCC,IACG,C,8FCNR,MAAMM,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,MACvCE,UAAW,OACX,8BAA+B,CAAEC,gBAAiB,iBA0BpD,EAvBmBC,IACjB,MAAM,SAAEX,EAAQ,GAAEY,KAAOC,GAAUF,EAKnC,MAJiB,iEAAiEG,KAChFC,UAAUC,YAIHb,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACL,GAAI,CAAEM,UAAW,QAASlB,SAAEA,KAIxCG,EAAAA,EAAAA,KAACG,EAAc,CAACM,GAAIA,KAAQC,EAAKb,SAC9BA,GACc,C,iFClBrB,MAiBA,EAjBgBH,IAAmB,IAAlB,SAAEG,GAAUH,EAC3B,MAAMsB,GAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,aAChD,OACEhB,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CACHV,GAAI,CAAEW,QAAS,OAAQC,EAAG,GAC1BC,UAAWN,EAAWO,aAAe,EAAI,EACzCC,QAAUR,EAAWO,kBAA4BE,EAAb,WAAuB5B,SAE1DA,GACI,C,uMCPX,MAmEA,EAnEmBH,IAAA,IAAC,SAAEgC,EAAQ,MAAEC,EAAK,MAAEhC,EAAK,SAAEE,GAAUH,EAAA,OACtDI,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CACHC,WAAS,EACTpB,GAAI,CACFF,gBAAiB,gBACjBuB,aAAeC,GAAUA,EAAMC,MAAMF,aAAe,EACpDT,EAAG,iBACHY,aAAc,OACdC,SAAU,WACVC,SAAU,UACVtC,SAAA,EAEFC,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE3C,SAAA,EACrCG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,KAAI3B,SAAEF,KAC1BK,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACC,MAAM,gBAAgBlB,QAAQ,KAAKmB,WAAY,IAAKC,GAAI,GAAKJ,GAAI,EAAE3C,SAC5E6B,KAEH1B,EAAAA,EAAAA,KAAC6C,EAAAA,EAAW,CACVC,WACE9C,EAAAA,EAAAA,KAAC+C,EAAAA,IAAU,CACTC,KAAK,IACLC,KAAK,gBACLC,YAAa,MACbC,MAAO,CAAEC,OAAQ,WAGrB3C,GAAI,CAAE4C,WAAY,SAAUT,GAAIjB,EAAQ,OAAS,IACjD,aAAW,aAAY9B,SAEtB8B,EACGA,EAAM2B,KAAKlB,IACTpC,EAAAA,EAAAA,KAAA,OAAAH,SACGuC,EAAKmB,IACJvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAI,CAACC,UAAU,OAAOf,MAAM,UAAUgB,UAAWC,EAAAA,GAASJ,GAAInB,EAAKmB,GAAG1D,SACpEuC,EAAKzC,SAGRK,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACC,MAAM,cAAa7C,SAAEuC,EAAKzC,SANhCyC,EAAKzC,SAUjB,SAGRK,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGnB,QAAQ,OAAOiC,WAAW,WAAUxD,UACnEG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACFL,GAAI,CACFW,QAAS,CAAEiB,GAAI,OAAQuB,GAAI,QAASrB,GAAI,QACxCc,WAAY,SACZQ,eAAgB,WAChBC,MAAO,QACPjE,SAEDA,GACCG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACL,GAAI,CAAEsD,IAAK,MAAO7B,SAAU,YAAarC,SAAEA,KAEhDG,EAAAA,EAAAA,KAAAgE,EAAAA,SAAA,CAAAnE,UACEG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACL,GAAI,CAAEsD,IAAK,MAAO7B,SAAU,YAAarC,UAC5CG,EAAAA,EAAAA,KAAA,OAAKiE,IAAKC,EAAeC,IAAKD,EAAeJ,MAAO,oBAMzD,C,sWC9CT,MA0LA,EA1LoBM,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAatD,EAAAA,EAAAA,KAAaC,GAAUA,EAAMsD,YAAYC,eAE5DC,EAAAA,EAAAA,YAAU,KACRL,GAASM,EAAAA,EAAAA,MAAa,GACrB,CAACN,IAEJ,MAOMO,GAAQ3D,EAAAA,EAAAA,KAAaC,GAPP2D,EAACD,EAAOE,IACtBF,EACKA,EAAMG,QAAQC,GAAMA,EAAE/E,KAAKgF,oBAAoBC,SAASJ,EAAQG,uBAElEL,EAIPC,CAAY3D,EAAMsD,YAAYI,MAAO1D,EAAMsD,YAAYW,cAGnDC,EAAcC,IAClB,IAAIC,EAAc,GAElB,MAAMC,EAAcF,EAAaG,SAASH,EAAaG,SAASC,OAAS,GACzE,GAAIF,EAAa,CACf,MAAMG,EAASH,EAAYI,WAAaN,EAAaO,GAAK,QAAU,GAC9DC,EAA+B,UAArBN,EAAYO,KAAmB,eAAiBP,EAAYQ,IAC5ET,EAAW,GAAAU,OAAMN,GAAMM,OAAGH,EAC5B,CAEA,OAAOP,CAAW,EAGdW,EAAgBC,IAAI,IAAAC,EAAA,OAAwB,QAAxBA,GAAKC,EAAAA,EAAAA,MAAKF,EAAKV,iBAAS,IAAAW,OAAA,EAAnBA,EAAqBE,SAAS,GAEtDC,EAAUC,GAAeC,EAAAA,SAAe,MACzCC,EAAOC,QAAQJ,GAIfK,EAAcA,KAClBJ,EAAY,KAAK,EAGnB,OACEzG,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EAIEC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,QAAS,OAAQiC,WAAW,SAASuD,IAAI,OAAOvF,EAAG,EAAExB,SAAA,EACxDG,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CACJrF,QAAQ,MACRsF,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,WACRvE,MAAM,UAAS7C,UAEfG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CAAC/C,IAAI,aAAaF,IAAKkD,EAAO1G,GAAI,CAAEqD,MAAO,GAAIsD,OAAQ,SAEhEtH,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAAjB,SAAA,EACFG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,QAAQmB,WAAY,IAAI9C,SAAC,cAG7CG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,QAAO3B,SAAC,6BAMhCG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACuG,GAAI,EAAGC,GAAI,EAAEzH,UAChBG,EAAAA,EAAAA,KAACuH,EAAAA,EAAS,CACR3B,GAAG,kBACH4B,YAAY,kBACZxE,KAAK,QACL8C,KAAK,SACLtE,QAAQ,WACRiG,WAAY,CACVC,cACE1H,EAAAA,EAAAA,KAAC2H,EAAAA,EAAc,CAACzF,SAAS,MAAKrC,UAC5BG,EAAAA,EAAAA,KAAC4H,EAAAA,IAAU,CAAC5E,KAAM,UAIxB6E,WAAS,EACTC,SAAWC,GAAM1D,GAAS2D,EAAAA,EAAAA,IAAWD,EAAEE,OAAOC,aAMlDpI,EAAAA,EAAAA,MAACqI,EAAAA,EAAI,CAAC1H,GAAI,CAAE4G,GAAI,GAAIxH,SAAA,EAClBC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACuG,GAAI,IAAKe,GAAI,EAAEvI,SAAA,EAClBC,EAAAA,EAAAA,MAACuI,EAAAA,EAAM,CACLzC,GAAG,eACH,gBAAea,EAAO,kBAAehF,EACrC,gBAAc,OACd,gBAAegF,EAAO,YAAShF,EAC/B6G,QA9DWC,IACnBhC,EAAYgC,EAAMC,cAAc,EA8DxB9F,MAAM,UAAS7C,SAAA,CAChB,iBACcG,EAAAA,EAAAA,KAACyI,EAAAA,IAAe,CAACzF,KAAK,WAErClD,EAAAA,EAAAA,MAAC4I,EAAAA,EAAI,CACH9C,GAAG,aACHU,SAAUA,EACVG,KAAMA,EACNkC,QAAShC,EACTiC,cAAe,CACb,kBAAmB,gBACnB/I,SAAA,EAEFG,EAAAA,EAAAA,KAAC6I,EAAAA,EAAQ,CAACP,QAAS3B,EAAY9G,SAAC,kBAChCG,EAAAA,EAAAA,KAAC6I,EAAAA,EAAQ,CAACP,QAAS3B,EAAY9G,SAAC,oBAChCG,EAAAA,EAAAA,KAAC6I,EAAAA,EAAQ,CAACP,QAAS3B,EAAY9G,SAAC,4BAGpCG,EAAAA,EAAAA,KAAC8I,EAAAA,EAAS,CAACrI,GAAI,CAAE2G,OAAQ,CAAE7E,GAAI,sBAAuBqB,GAAI,SAAWtD,UAAW,SAAUT,SACvF+E,GAASA,EAAMa,OACdb,EAAMtB,KAAK4C,IACTpG,EAAAA,EAAAA,MAACiJ,EAAAA,EAAc,CAEbT,QAASA,IAAMjE,GAAS2E,EAAAA,EAAAA,IAAW9C,EAAKN,KACxCnF,GAAI,CACF+B,GAAI,GACJ8E,GAAI,EACJD,GAAI,EACJhE,WAAY,SAEd4F,SAAU1E,IAAe2B,EAAKN,GAAG/F,SAAA,EAEjCG,EAAAA,EAAAA,KAACkJ,EAAAA,EAAc,CAAArJ,UACbG,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CACJnE,MACkB,WAAhBwD,EAAKiD,OACD,UACgB,SAAhBjD,EAAKiD,OACL,QACgB,SAAhBjD,EAAKiD,OACL,UACA,YAEN3H,QAAQ,MACRsF,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,WAAUpH,UAElBG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CAAC/C,IAAI,aAAaF,IAAKiC,EAAKkD,MAAO3I,GAAI,CAAEqD,MAAO,GAAIsD,OAAQ,WAGvEpH,EAAAA,EAAAA,KAACqJ,EAAAA,EAAY,CACXC,SACEtJ,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,YAAYmB,WAAY,IAAKH,GAAI,GAAI3C,SACtDqG,EAAKjG,OAGVsJ,UAAWnE,EAAWc,GACtBsD,yBAA0B,CACxBC,QAAQ,GAEVhJ,GAAI,CAAEiJ,GAAI,MAEZ1J,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACL,GAAI,CAAEkJ,WAAY,KAAO/G,GAAI,GAAI/C,UACpCG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,QAAO3B,UACxB+J,EAAAA,EAAAA,GAA0B,IAAIC,KAAK5D,EAAaC,IAAQ,CACvD4D,WAAW,UA9CZ5D,EAAKN,OAqDd5F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACiJ,EAAG,EAAElK,UACRG,EAAAA,EAAAA,KAACgK,EAAAA,EAAK,CAACC,SAAS,QAAQzI,QAAQ,SAASf,GAAI,CAAEiC,MAAO,SAAU7C,SAAC,gCAOrE,ECrLV,EApBoBH,IAA8C,IAA7C,oBAAEwK,EAAmB,eAAEC,GAAgBzK,EAC1D,MAAM0K,GAAOC,EAAAA,EAAAA,IAAetI,GAAUA,EAAMuI,YAAYC,GAAG,QAE3D,OACEvK,EAAAA,EAAAA,KAACwK,EAAAA,GAAM,CACL/D,KAAMyD,EACNvB,QAASwB,EACT3I,QAAS4I,EAAO,YAAc,YAC9B3J,GAAI,CACFqD,MAXY,IAYZ6F,WAAY,EACZc,OAAQL,EAAO,EAAI,EACnB,qBAAwB,CAAElI,SAAU,aACpCrC,UAEFG,EAAAA,EAAAA,KAACoE,EAAW,KACL,E,2DCPb,MA+GA,EA7G0B1E,IAA4B,IAA3B,YAAEgL,EAAW,KAAExE,GAAMxG,EAC9C,MAAM0K,GAAOC,EAAAA,EAAAA,IAAetI,GAAUA,EAAMuI,YAAYC,GAAG,QACrDI,GAAkBC,EAAAA,EAAAA,OAAKC,EAAAA,EAAAA,SAAY,OAAJ3E,QAAI,IAAJA,OAAI,EAAJA,EAAMV,SAASlC,KAAKlB,GAASA,EAAK0I,eAAcrF,OAC/EsF,GACJH,EAAAA,EAAAA,OAAKC,EAAAA,EAAAA,SAAY,OAAJ3E,QAAI,IAAJA,OAAI,EAAJA,EAAMV,SAASlC,KAAKlB,GAAyB,WAAX,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM0D,MAAmB1D,EAAK2D,IAAM,SAASN,OACxF,EAEIuF,GAAc5K,EAAAA,EAAAA,IAAO6K,EAAAA,EAAP7K,EAAc,MAChC,eAAgB,CACdgB,QAAS,QAEX,uBAAwB,CACtBA,QAAS,aAIb,OACEpB,EAAAA,EAAAA,KAAAgE,EAAAA,SAAA,CAAAnE,SACG6K,GACC5K,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CACFL,GAAI,CACFqD,OAAuB,IAAhB4G,EAvBC,IAuBoC,EAC5Cf,WAAY,EACZuB,OAAQ,IACRC,WAAY,MACZC,YAAa,QACbC,MAAO,IACPC,WAAavJ,GAAUA,EAAMwJ,QAAQD,WAAWE,MAChDC,UAAWrB,EAAO,KAAQrI,GAAUA,EAAM2J,QAAQ,GAClDxJ,SAAUkI,EAAO,WAAa,WAC9BuB,YAAc5J,GAAUA,EAAMwJ,QAAQK,SAExCvK,EAAG,EAAExB,SAAA,EAELC,EAAAA,EAAAA,MAAC2C,EAAAA,EAAU,CAACjB,QAAQ,KAAKgB,GAAI,EAAE3C,SAAA,CAAC,UACtBkL,EAAW,QAErBjL,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAACC,WAAS,EAACgK,QAAS,EAAEhM,SAAA,CACpB,OAAJqG,QAAI,IAAJA,OAAI,EAAJA,EAAMV,SAASlC,KAAKwI,IAEjB9L,EAAAA,EAAAA,KAACwG,EAAAA,SAAc,CAAA3G,SACA,WAAX,OAADiM,QAAC,IAADA,OAAC,EAADA,EAAGhG,OACF9F,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAE1C,UACvBG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CACLjD,IAAM,OAAD6H,QAAC,IAADA,OAAC,EAADA,EAAG/F,IACR5B,IAAI,QACJ3C,QAAQ,UACRf,GAAI,CAAEqD,MAAO,OAAQsD,OAAQ,YAG/B,MAVe0E,EAAElG,OAc3B5F,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACQ,MAAI,EAACC,GAAI,GAAIE,GAAI,GAAG1C,SACR,IAAfkL,GAAmB/K,EAAAA,EAAAA,KAACgK,EAAAA,EAAK,CAACC,SAAS,QAAOpK,SAAC,oBAA0B,WAI1EC,EAAAA,EAAAA,MAAC2C,EAAAA,EAAU,CAACjB,QAAQ,KAAKoB,GAAI,EAAGJ,GAAI,EAAE3C,SAAA,CAAC,gBACvB8K,EAAgB,QAEhC7K,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAAjB,SAAA,CACG,OAAJqG,QAAI,IAAJA,OAAI,EAAJA,EAAMV,SAASlC,KAAI,CAACwI,EAAGC,KAAW,IAADC,EAChC,OACEhM,EAAAA,EAAAA,KAACiL,EAAAA,EAAK,CAACY,QAAS,IAAiBI,UAAU,SAAQpM,SAC/C,OAADiM,QAAC,IAADA,GAAa,QAAZE,EAADF,EAAGhB,kBAAU,IAAAkB,OAAZ,EAADA,EAAe1I,KAAI,CAAC4I,EAAGH,KAEpBjM,EAAAA,EAAAA,MAACkL,EAAW,CAAiBiB,UAAU,MAAMrF,IAAK,EAAE/G,SAAA,EAClDG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CACL1F,QAAQ,UACRf,GAAI,CACFqD,MAAO,OACPsD,OAAQ,OACR+E,QAAUpK,GAAUA,EAAMwJ,QAAQa,KAAK,MACvCvM,UAEFG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CACLjD,IAAKiI,EAAEG,KACPlI,IAAI,KACJ3C,QAAQ,UACRf,GAAI,CAAEqD,MAAO,OAAQsD,OAAQ,aAGjCtH,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACwL,GAAI,OAAOzM,SAAA,EACdG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,YAAYmB,WAAY,IAAKH,GAAI,EAAE3C,SACpDqM,EAAEK,QAELvM,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,QAAO3B,SAAEqM,EAAEM,eAEjCxM,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAC2L,UAAU,cAAa5M,UAC1BG,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAAQ7M,UAC7BG,EAAAA,EAAAA,KAAC2M,EAAAA,IAAY,CAACC,OAAQ,IAAK5J,KAAK,aAxBpB+I,EAAQG,MAHNH,EAiClB,IAGS,IAApBpB,GAAwB3K,EAAAA,EAAAA,KAACgK,EAAAA,EAAK,CAACC,SAAS,QAAOpK,SAAC,yBAA+B,WAGlF,MACH,ECyFP,EA9LoBH,IAA4B,IAA3B,kBAAEmN,GAAmBnN,EACxC,MAAO+G,EAAMqG,GAAWtG,EAAAA,UAAe,GACjC4D,GAAOC,EAAAA,EAAAA,IAAetI,GAAUA,EAAMuI,YAAYC,GAAG,QAErDwC,GAAc9L,EAAAA,EAAAA,KACjBC,GAAUA,EAAMsD,YAAYI,MAAM1D,EAAMsD,YAAYC,YAAc,KAGrE,OACEzE,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAAjB,SACDkN,GACCjN,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAAjB,SAAA,EAIFC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAAjB,SAAA,EACFC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,QAAQ,OAAOiC,WAAW,SAAShC,EAAG,EAAExB,SAAA,EAC3CG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACFL,GAAI,CACFW,QAAS,CAAEiB,GAAI,QAASuB,GAAI,QAASrB,GAAI,QACzC+J,GAAI,QACJzM,UAEFG,EAAAA,EAAAA,KAACgN,EAAAA,IAAS,CAACJ,OAAQ,IAAKtE,QAASuE,OAEnC/M,EAAAA,EAAAA,MAACmN,EAAAA,GAAQ,CAAsBC,OAAK,EAACC,gBAAc,EAAAtN,SAAA,EACjDG,EAAAA,EAAAA,KAACkJ,EAAAA,EAAc,CAAArJ,UACbG,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CACJnE,MACyB,WAAvBqK,EAAY5D,OACR,UACuB,SAAvB4D,EAAY5D,OACZ,QACuB,SAAvB4D,EAAY5D,OACZ,UACA,YAEN3H,QAAQ,MACRsF,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,WAAUpH,UAElBG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CAAC/C,IAAK4I,EAAY9M,KAAMgE,IAAK8I,EAAY3D,aAGpDpJ,EAAAA,EAAAA,KAACqJ,EAAAA,EAAY,CACXC,SAAStJ,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,KAAI3B,SAAEkN,EAAY9M,OAC/CsJ,UAAWwD,EAAY5D,WAxBZ4D,EAAYnH,KA2B3B9F,EAAAA,EAAAA,MAACmL,EAAAA,EAAK,CAACgB,UAAW,MAAMpM,SAAA,EACtBG,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAAQ7M,UAC7BG,EAAAA,EAAAA,KAACoN,EAAAA,IAAS,CAACR,OAAQ,SAErB5M,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAAQ7M,UAC7BG,EAAAA,EAAAA,KAACqN,EAAAA,IAAS,CAACT,OAAQ,SAErB5M,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAASpE,QAASA,IAAMwE,GAASrG,GAAM5G,UAC5DG,EAAAA,EAAAA,KAACsN,EAAAA,IAAgB,CAACV,OAAQ,eAIhC5M,EAAAA,EAAAA,KAACuN,EAAAA,EAAO,QAMVzN,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,QAAQ,OAAMvB,SAAA,EAKjBG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACgD,MAAM,OAAMjE,UACfG,EAAAA,EAAAA,KAAC8I,EAAAA,EAAS,CAACrI,GAAI,CAAE2G,OAAQ,QAASjF,SAAU,OAAQ7B,UAAW,SAAUT,UACvEG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACO,EAAG,EAAExB,SACPkN,EAAYvH,SAASlC,KAAK4C,IAEvBlG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAAjB,SACDkN,EAAYnH,KAAOM,EAAKP,UACvB3F,EAAAA,EAAAA,KAAAgE,EAAAA,SAAA,CAAAnE,UACEC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,QAAQ,OAAMvB,SAAA,EACjBG,EAAAA,EAAAA,KAACkJ,EAAAA,EAAc,CAAArJ,UACbG,EAAAA,EAAAA,KAACkH,EAAAA,EAAM,CACL/C,IAAK4I,EAAY9M,KACjBgE,IAAK8I,EAAY3D,MACjB3I,GAAI,CAAEqD,MAAO,GAAIsD,OAAQ,SAG7BtH,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAAjB,SAAA,CACDqG,EAAKG,WACJvG,EAAAA,EAAAA,MAAC2C,EAAAA,EAAU,CAACjB,QAAQ,QAAQkB,MAAM,WAAWF,GAAI,EAAE3C,SAAA,CAChDkN,EAAY9M,KAAK,IAAE,KACnB2J,EAAAA,EAAAA,GAA0B,IAAIC,KAAK3D,EAAKG,WAAY,CACnDyD,WAAW,IACT,IAAI,SAGR,KACW,SAAd5D,EAAKJ,MACJ9F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACF0B,GAAI,EACJ/B,GAAI,CACFY,EAAG,EACHd,gBAAiB,WACjB+L,GAAI,OACJkB,SAAU,SACV3N,SAEDqG,EAAKH,MAEN,KACW,UAAdG,EAAKJ,MACJ9F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAC0B,GAAI,EAAG/B,GAAI,CAAE0B,SAAU,SAAUsL,WAAY,OAAQ5N,UACxDG,EAAAA,EAAAA,KAAA,OAAKiE,IAAKiC,EAAKH,IAAK5B,IAAI,SAASL,MAAM,UAEvC,cAKV9D,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACF0B,GAAI,EACJpB,QAAQ,OACRiC,WAAW,WACXqK,cAAc,cAAa7N,UAE3BC,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACuC,WAAW,WAAWjC,QAAQ,OAAOsM,cAAe,SAAS7N,SAAA,CAC/DqG,EAAKG,WACJrG,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,QAAQkB,MAAM,WAAWF,GAAI,EAAE3C,SAAC,QAGlD,KACW,SAAdqG,EAAKJ,MACJ9F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACF0B,GAAI,EAEJ/B,GAAI,CACFY,EAAG,EACHd,gBAAiB,gBACjBoN,GAAI,OACJH,SAAU,SACV3N,SAEDqG,EAAKH,KARDG,EAAKN,IAUV,KACW,UAAdM,EAAKJ,MACJ9F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAC0B,GAAI,EAAG/B,GAAI,CAAE0B,SAAU,SAAUsL,WAAY,OAAQ5N,UACxDG,EAAAA,EAAAA,KAAA,OAAKiE,IAAKiC,EAAKH,IAAK5B,IAAI,SAASL,MAAM,UAEvC,WAzEFoC,EAAKN,GAAKM,EAAKH,IAAMG,EAAKG,oBAuF9CrG,EAAAA,EAAAA,KAAC4N,EAAiB,CAAClD,YAAaN,EAAO3D,GAAQA,EAAMP,KAAM6G,WAI/DjN,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,QAAQ,OAAOiC,WAAW,SAAShC,EAAG,EAAG+G,GAAI,EAAGyF,GAAI,EAAEhO,SAAA,EAIzDG,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CACFL,GAAI,CACFW,QAAS,CAAEiB,GAAI,OAAQuB,GAAI,OAAQrB,GAAI,QACvC+J,GAAI,QACJzM,UAEFG,EAAAA,EAAAA,KAACgN,EAAAA,IAAS,CAACJ,OAAQ,IAAKtE,QAASuE,OAEnC7M,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACjB,QAAQ,KAAI3B,SAAC,oBAGzB,E,8CCxMV,MAmGA,EAnGoBiO,KAClB,MAAO/H,EAAKgI,GAAUvH,EAAAA,SAAe,IAC/BnC,GAAWC,EAAAA,EAAAA,OACVgC,EAAUC,GAAeC,EAAAA,SAAe,OACxCwH,EAAaC,GAAkBzH,EAAAA,WAoBhC0H,EAAS,CAAEtI,IANN3E,EAAAA,EAAAA,KAAaC,GAAUA,EAAMsD,YAAYC,cAM/BsB,OASrB,OACE/F,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACO,EAAG,EAAExB,UAIRC,EAAAA,EAAAA,MAAA,QACEqO,SAbmBpG,IACvBA,EAAEqG,iBACFrG,EAAEsG,kBACFhK,GAASiK,EAAAA,EAAAA,IAAQJ,IACjBH,EAAO,GAAG,EAUN5K,MAAO,CAAE/B,QAAS,OAAQwF,IAAK,OAAQvD,WAAY,UAAWxD,SAAA,EAK9DG,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CACT,aAAW,OACX9G,GAAG,cACH,gBAAc,YACd,gBAAc,OACd,gBAAc,OACd0C,QAxCaC,IACnBhC,EAAYgC,EAAMC,cAAc,EAuCL3I,UAErBG,EAAAA,EAAAA,KAACuO,EAAAA,IAAa,OAEhBzO,EAAAA,EAAAA,MAAC0O,EAAAA,GAAO,CACN5I,GAAG,YACHU,SAAUA,EACVmI,aAAW,EACXhI,KAAMC,QAAQJ,GACdqC,QA9CYhC,KAClBJ,EAAY,KAAK,EA8CXO,aAAc,CAAEE,WAAY,QAASD,SAAU,UAC/C2H,gBAAiB,CAAE1H,WAAY,QAASD,SAAU,UAAWlH,SAAA,EAE7DG,EAAAA,EAAAA,KAAC2O,IAAM,CAACC,aA1DKA,CAACC,EAAQC,KAC5Bb,EAAea,GACff,EAAOe,EAAYC,MAAM,EAwDiBC,QAAM,KAC1ClP,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACO,EAAG,EAAExB,SAAA,CAAC,aAAWmO,EAAcA,EAAYe,MAAQ,UAE1D/O,EAAAA,EAAAA,KAACiP,EAAAA,GAAS,CACRrJ,GAAG,WACHiC,WAAS,EACTK,MAAOnC,EACPyB,YAAY,iBACZxE,KAAK,QACL8C,KAAK,OACLoJ,WAAY,CAAE,aAAc,kBAC5BpH,UAvDqBC,IAC3BgG,EAAOhG,EAAEE,OAAOC,MAAM,GAsDciH,KAAK,SAErCnP,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CACT,aAAW,SACXpE,QAASA,KACPjE,GAASiK,EAAAA,EAAAA,IAAQJ,IACjBH,EAAO,GAAG,EAEZqB,UAAWrJ,EACXrD,MAAM,UAAS7C,UAEfG,EAAAA,EAAAA,KAACqP,EAAAA,IAAQ,CAACzC,OAAQ,IAAK5J,KAAK,UAE9BhD,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAAQ7M,UAC7BG,EAAAA,EAAAA,KAACsP,EAAAA,IAAS,CAAC1C,OAAQ,IAAK5J,KAAK,UAE/BhD,EAAAA,EAAAA,KAAC0M,EAAAA,EAAU,CAAC,aAAW,SAAQ7M,UAC7BG,EAAAA,EAAAA,KAACuP,EAAAA,IAAa,CAAC3C,OAAQ,IAAK5J,KAAK,aAGjC,E,eC7FV,MA6BA,EA7BcwM,KACZ,MAAOtF,EAAqBuF,IAAwBC,EAAAA,EAAAA,WAAS,GAE7D,OACE5P,EAAAA,EAAAA,MAAC6P,EAAAA,EAAa,CAAChQ,MAAM,UAAUC,YAAY,oBAAmBC,SAAA,EAC5DG,EAAAA,EAAAA,KAAC4P,EAAAA,EAAU,CAACjQ,MAAM,WAAW+B,SAAS,eACtC5B,EAAAA,EAAAA,MAAC+P,EAAAA,EAAO,CAAAhQ,SAAA,EAKNG,EAAAA,EAAAA,KAAC8P,EAAW,CACV5F,oBAAqBA,EACrBC,eAAgBA,IAAMsF,GAAqB,MAM7C3P,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACiP,SAAU,EAAElQ,SAAA,EACfG,EAAAA,EAAAA,KAACgQ,EAAW,CAACnD,kBAAmBA,IAAM4C,GAAqB,MAC3DzP,EAAAA,EAAAA,KAACuN,EAAAA,EAAO,KACRvN,EAAAA,EAAAA,KAAC8N,EAAW,YAGF,C","sources":["components/container/PageContainer.js","components/custom-scroll/Scrollbar.js","components/shared/AppCard.js","layouts/full/shared/breadcrumb/Breadcrumb.js","components/apps/chats/ChatListing.js","components/apps/chats/ChatSidebar.js","components/apps/chats/ChatInsideSidebar.js","components/apps/chats/ChatContent.js","components/apps/chats/ChatMsgSent.js","views/apps/chat/Chat.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst PageContainer = ({ title, description, children }) => (\r\n  <div>\r\n    <Helmet>\r\n      <title>{title}</title>\r\n      <meta name=\"description\" content={description} />\r\n    </Helmet>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nPageContainer.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default PageContainer;\r\n","import PropTypes from 'prop-types';\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { Box, styled } from '@mui/material';\r\n\r\nconst SimpleBarStyle = styled(SimpleBar)(() => ({\r\n  maxHeight: '100%',\r\n  '.simplebar-scrollbar:before': { backgroundColor: '#2e2d348f' },\r\n}));\r\n\r\nconst Scrollbar = (props) => {\r\n  const { children, sx, ...other } = props;\r\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent,\r\n  );\r\n\r\n  if (isMobile) {\r\n    return <Box sx={{ overflowX: 'auto' }}>{children}</Box>;\r\n  }\r\n\r\n  return (\r\n    <SimpleBarStyle sx={sx} {...other}>\r\n      {children}\r\n    </SimpleBarStyle>\r\n  );\r\n};\r\n\r\nScrollbar.propTypes = {\r\n  children: PropTypes.node,\r\n  sx: PropTypes.object,\r\n  other: PropTypes.any,\r\n};\r\n\r\nexport default Scrollbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst AppCard = ({ children }) => {\r\n  const customizer = useSelector((state) => state.customizer);\r\n  return (\r\n    <Card\r\n      sx={{ display: 'flex', p: 0 }}\r\n      elevation={customizer.isCardShadow ? 9 : 0}\r\n      variant={!customizer.isCardShadow ? 'outlined' : undefined}\r\n    >\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\n\r\nAppCard.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default AppCard;\r\n","import React from 'react';\r\nimport { Grid, Typography, Box, Breadcrumbs, Link } from '@mui/material';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport breadcrumbImg from 'src/assets/images/breadcrumb/ChatBc.png';\r\nimport { IconCircle } from '@tabler/icons';\r\n\r\nconst Breadcrumb = ({ subtitle, items, title, children }) => (\r\n  <Grid\r\n    container\r\n    sx={{\r\n      backgroundColor: 'primary.light',\r\n      borderRadius: (theme) => theme.shape.borderRadius / 4,\r\n      p: '30px 25px 20px',\r\n      marginBottom: '30px',\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n    }}\r\n  >\r\n    <Grid item xs={12} sm={6} lg={8} mb={1}>\r\n      <Typography variant=\"h4\">{title}</Typography>\r\n      <Typography color=\"textSecondary\" variant=\"h6\" fontWeight={400} mt={0.8} mb={0}>\r\n        {subtitle}\r\n      </Typography>\r\n      <Breadcrumbs\r\n        separator={\r\n          <IconCircle\r\n            size=\"5\"\r\n            fill=\"textSecondary\"\r\n            fillOpacity={'0.6'}\r\n            style={{ margin: '0 5px' }}\r\n          />\r\n        }\r\n        sx={{ alignItems: 'center', mt: items ? '10px' : '' }}\r\n        aria-label=\"breadcrumb\"\r\n      >\r\n        {items\r\n          ? items.map((item) => (\r\n              <div key={item.title}>\r\n                {item.to ? (\r\n                  <Link underline=\"none\" color=\"inherit\" component={NavLink} to={item.to}>\r\n                    {item.title}\r\n                  </Link>\r\n                ) : (\r\n                  <Typography color=\"textPrimary\">{item.title}</Typography>\r\n                )}\r\n              </div>\r\n            ))\r\n          : ''}\r\n      </Breadcrumbs>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} lg={4} display=\"flex\" alignItems=\"flex-end\">\r\n      <Box\r\n        sx={{\r\n          display: { xs: 'none', md: 'block', lg: 'flex' },\r\n          alignItems: 'center',\r\n          justifyContent: 'flex-end',\r\n          width: '100%',\r\n        }}\r\n      >\r\n        {children ? (\r\n          <Box sx={{ top: '0px', position: 'absolute' }}>{children}</Box>\r\n        ) : (\r\n          <>\r\n            <Box sx={{ top: '0px', position: 'absolute' }}>\r\n              <img src={breadcrumbImg} alt={breadcrumbImg} width={'165px'} />\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default Breadcrumb;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Avatar,\r\n  List,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  TextField,\r\n  Box,\r\n  Alert,\r\n  Badge,\r\n  ListItemButton,\r\n  Typography,\r\n  InputAdornment,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n} from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Scrollbar from '../../custom-scroll/Scrollbar';\r\nimport { SelectChat, fetchChats, SearchChat } from '../../../store/apps/chat/ChatSlice';\r\nimport { last } from 'lodash';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\nimport { IconChevronDown, IconSearch } from '@tabler/icons';\r\nimport user1 from 'src/assets/images/profile/user-1.jpg';\r\n\r\nconst ChatListing = () => {\r\n  const dispatch = useDispatch();\r\n  const activeChat = useSelector((state) => state.chatReducer.chatContent);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchChats());\r\n  }, [dispatch]);\r\n\r\n  const filterChats = (chats, cSearch) => {\r\n    if (chats)\r\n      return chats.filter((t) => t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()));\r\n\r\n    return chats;\r\n  };\r\n\r\n  const chats = useSelector((state) =>\r\n    filterChats(state.chatReducer.chats, state.chatReducer.chatSearch),\r\n  );\r\n\r\n  const getDetails = (conversation) => {\r\n    let displayText = '';\r\n\r\n    const lastMessage = conversation.messages[conversation.messages.length - 1];\r\n    if (lastMessage) {\r\n      const sender = lastMessage.senderId === conversation.id ? 'You: ' : '';\r\n      const message = lastMessage.type === 'image' ? 'Sent a photo' : lastMessage.msg;\r\n      displayText = `${sender}${message}`;\r\n    }\r\n\r\n    return displayText;\r\n  };\r\n\r\n  const lastActivity = (chat) => last(chat.messages)?.createdAt;\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ------------------------------------------- */}\r\n      {/* Profile */}\r\n      {/* ------------------------------------------- */}\r\n      <Box display={'flex'} alignItems=\"center\" gap=\"10px\" p={3}>\r\n        <Badge\r\n          variant=\"dot\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          overlap=\"circular\"\r\n          color=\"success\"\r\n        >\r\n          <Avatar alt=\"Remy Sharp\" src={user1} sx={{ width: 54, height: 54 }} />\r\n        </Badge>\r\n        <Box>\r\n          <Typography variant=\"body1\" fontWeight={600}>\r\n            John Deo\r\n          </Typography>\r\n          <Typography variant=\"body2\">Marketing Manager</Typography>\r\n        </Box>\r\n      </Box>\r\n      {/* ------------------------------------------- */}\r\n      {/* Search */}\r\n      {/* ------------------------------------------- */}\r\n      <Box px={3} py={1}>\r\n        <TextField\r\n          id=\"outlined-search\"\r\n          placeholder=\"Search contacts\"\r\n          size=\"small\"\r\n          type=\"search\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconSearch size={'16'} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          fullWidth\r\n          onChange={(e) => dispatch(SearchChat(e.target.value))}\r\n        />\r\n      </Box>\r\n      {/* ------------------------------------------- */}\r\n      {/* Contact List */}\r\n      {/* ------------------------------------------- */}\r\n      <List sx={{ px: 0 }}>\r\n        <Box px={2.5} pb={1}>\r\n          <Button\r\n            id=\"basic-button\"\r\n            aria-controls={open ? 'basic-menu' : undefined}\r\n            aria-haspopup=\"true\"\r\n            aria-expanded={open ? 'true' : undefined}\r\n            onClick={handleClick}\r\n            color=\"inherit\"\r\n          >\r\n            Recent Chats <IconChevronDown size=\"16\" />\r\n          </Button>\r\n          <Menu\r\n            id=\"basic-menu\"\r\n            anchorEl={anchorEl}\r\n            open={open}\r\n            onClose={handleClose}\r\n            MenuListProps={{\r\n              'aria-labelledby': 'basic-button',\r\n            }}\r\n          >\r\n            <MenuItem onClick={handleClose}>Sort By Time</MenuItem>\r\n            <MenuItem onClick={handleClose}>Sort By Unread</MenuItem>\r\n            <MenuItem onClick={handleClose}>Mark as all Read</MenuItem>\r\n          </Menu>\r\n        </Box>\r\n        <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '600px' }}>\r\n          {chats && chats.length ? (\r\n            chats.map((chat) => (\r\n              <ListItemButton\r\n                key={chat.id}\r\n                onClick={() => dispatch(SelectChat(chat.id))}\r\n                sx={{\r\n                  mb: 0.5,\r\n                  py: 2,\r\n                  px: 3,\r\n                  alignItems: 'start',\r\n                }}\r\n                selected={activeChat === chat.id}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Badge\r\n                    color={\r\n                      chat.status === 'online'\r\n                        ? 'success'\r\n                        : chat.status === 'busy'\r\n                        ? 'error'\r\n                        : chat.status === 'away'\r\n                        ? 'warning'\r\n                        : 'secondary'\r\n                    }\r\n                    variant=\"dot\"\r\n                    anchorOrigin={{\r\n                      vertical: 'bottom',\r\n                      horizontal: 'right',\r\n                    }}\r\n                    overlap=\"circular\"\r\n                  >\r\n                    <Avatar alt=\"Remy Sharp\" src={chat.thumb} sx={{ width: 42, height: 42 }} />\r\n                  </Badge>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography variant=\"subtitle2\" fontWeight={600} mb={0.5}>\r\n                      {chat.name}\r\n                    </Typography>\r\n                  }\r\n                  secondary={getDetails(chat)}\r\n                  secondaryTypographyProps={{\r\n                    noWrap: true,\r\n                  }}\r\n                  sx={{ my: 0 }}\r\n                />\r\n                <Box sx={{ flexShrink: '0' }} mt={0.5}>\r\n                  <Typography variant=\"body2\">\r\n                    {formatDistanceToNowStrict(new Date(lastActivity(chat)), {\r\n                      addSuffix: false,\r\n                    })}\r\n                  </Typography>\r\n                </Box>\r\n              </ListItemButton>\r\n            ))\r\n          ) : (\r\n            <Box m={2}>\r\n              <Alert severity=\"error\" variant=\"filled\" sx={{ color: 'white' }}>\r\n                No Contacts Found!\r\n              </Alert>\r\n            </Box>\r\n          )}\r\n        </Scrollbar>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListing;\r\n","import React from 'react';\r\nimport { Drawer, useMediaQuery } from '@mui/material';\r\nimport ChatListing from './ChatListing';\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst ChatSidebar = ({ isMobileSidebarOpen, onSidebarClose }) => {\r\n  const lgUp = useMediaQuery((theme) => theme.breakpoints.up('lg'));\r\n\r\n  return (\r\n    <Drawer\r\n      open={isMobileSidebarOpen}\r\n      onClose={onSidebarClose}\r\n      variant={lgUp ? 'permanent' : 'temporary'}\r\n      sx={{\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        zIndex: lgUp ? 0 : 1,\r\n        [`& .MuiDrawer-paper`]: { position: 'relative' },\r\n      }}\r\n    >\r\n      <ChatListing />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  useMediaQuery,\r\n  Typography,\r\n  Stack,\r\n  Avatar,\r\n  Grid,\r\n  Alert,\r\n  IconButton,\r\n  styled,\r\n} from '@mui/material';\r\nimport { uniq, flatten } from 'lodash';\r\nimport { IconDownload } from '@tabler/icons';\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst ChatInsideSidebar = ({ isInSidebar, chat }) => {\r\n  const lgUp = useMediaQuery((theme) => theme.breakpoints.up('lg'));\r\n  const totalAttachment = uniq(flatten(chat?.messages.map((item) => item.attachment))).length;\r\n  const totalMedia =\r\n    uniq(flatten(chat?.messages.map((item) => (item?.type === 'image' ? item.msg : null)))).length -\r\n    1;\r\n\r\n  const StyledStack = styled(Stack)(() => ({\r\n    '.showOnHover': {\r\n      display: 'none',\r\n    },\r\n    '&:hover .showOnHover': {\r\n      display: 'block',\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      {isInSidebar ? (\r\n        <Box\r\n          sx={{\r\n            width: isInSidebar === true ? drawerWidth : 0,\r\n            flexShrink: 0,\r\n            border: '0',\r\n            borderLeft: '1px',\r\n            borderStyle: 'solid',\r\n            right: '0',\r\n            background: (theme) => theme.palette.background.paper,\r\n            boxShadow: lgUp ? null : (theme) => theme.shadows[8],\r\n            position: lgUp ? 'relative' : 'absolute',\r\n            borderColor: (theme) => theme.palette.divider,\r\n          }}\r\n          p={3}\r\n        >\r\n          <Typography variant=\"h6\" mb={2}>\r\n            Media ({totalMedia})\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {chat?.messages.map((c) => {\r\n              return (\r\n                <React.Fragment key={c.id}>\r\n                  {c?.type === 'image' ? (\r\n                    <Grid item xs={12} lg={4}>\r\n                      <Avatar\r\n                        src={c?.msg}\r\n                        alt=\"media\"\r\n                        variant=\"rounded\"\r\n                        sx={{ width: '72px', height: '72px' }}\r\n                      />\r\n                    </Grid>\r\n                  ) : null}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n            <Grid item xs={12} lg={12}>\r\n              {totalMedia === 0 ? <Alert severity=\"error\">No Media Found!</Alert> : null}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Typography variant=\"h6\" mt={5} mb={2}>\r\n            Attachments ({totalAttachment})\r\n          </Typography>\r\n          <Box>\r\n            {chat?.messages.map((c, index) => {\r\n              return (\r\n                <Stack spacing={2.5} key={index} direction=\"column\">\r\n                  {c?.attachment?.map((a, index) => {\r\n                    return (\r\n                      <StyledStack key={index + a} direction=\"row\" gap={2}>\r\n                        <Avatar\r\n                          variant=\"rounded\"\r\n                          sx={{\r\n                            width: '48px',\r\n                            height: '48px',\r\n                            bgcolor: (theme) => theme.palette.grey[100],\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            src={a.icon}\r\n                            alt=\"av\"\r\n                            variant=\"rounded\"\r\n                            sx={{ width: '24px', height: '24px' }}\r\n                          ></Avatar>\r\n                        </Avatar>\r\n                        <Box mr={'auto'}>\r\n                          <Typography variant=\"subtitle2\" fontWeight={600} mb={1}>\r\n                            {a.file}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">{a.fileSize}</Typography>\r\n                        </Box>\r\n                        <Box className=\"showOnHover\">\r\n                          <IconButton aria-label=\"delete\">\r\n                            <IconDownload stroke={1.5} size=\"20\" />\r\n                          </IconButton>\r\n                        </Box>\r\n                      </StyledStack>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              );\r\n            })}\r\n            {totalAttachment === 0 ? <Alert severity=\"error\">No Attachment Found!</Alert> : null}\r\n          </Box>\r\n        </Box>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatInsideSidebar;\r\n","import React from 'react';\r\nimport {\r\n  Typography,\r\n  Divider,\r\n  Avatar,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  IconButton,\r\n  Box,\r\n  Stack,\r\n  Badge,\r\n  useMediaQuery,\r\n} from '@mui/material';\r\nimport { IconDotsVertical, IconMenu2, IconPhone, IconVideo } from '@tabler/icons';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\nimport ChatInsideSidebar from './ChatInsideSidebar';\r\nimport Scrollbar from 'src/components/custom-scroll/Scrollbar';\r\n\r\nconst ChatContent = ({ toggleChatSidebar }) => {\r\n  const [open, setOpen] = React.useState(true);\r\n  const lgUp = useMediaQuery((theme) => theme.breakpoints.up('lg'));\r\n\r\n  const chatDetails = useSelector(\r\n    (state) => state.chatReducer.chats[state.chatReducer.chatContent - 1],\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      {chatDetails ? (\r\n        <Box>\r\n          {/* ------------------------------------------- */}\r\n          {/* Header Part */}\r\n          {/* ------------------------------------------- */}\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" p={2}>\r\n              <Box\r\n                sx={{\r\n                  display: { xs: 'block', md: 'block', lg: 'none' },\r\n                  mr: '10px',\r\n                }}\r\n              >\r\n                <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />\r\n              </Box>\r\n              <ListItem key={chatDetails.id} dense disableGutters>\r\n                <ListItemAvatar>\r\n                  <Badge\r\n                    color={\r\n                      chatDetails.status === 'online'\r\n                        ? 'success'\r\n                        : chatDetails.status === 'busy'\r\n                        ? 'error'\r\n                        : chatDetails.status === 'away'\r\n                        ? 'warning'\r\n                        : 'secondary'\r\n                    }\r\n                    variant=\"dot\"\r\n                    anchorOrigin={{\r\n                      vertical: 'bottom',\r\n                      horizontal: 'right',\r\n                    }}\r\n                    overlap=\"circular\"\r\n                  >\r\n                    <Avatar alt={chatDetails.name} src={chatDetails.thumb} />\r\n                  </Badge>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={<Typography variant=\"h5\">{chatDetails.name}</Typography>}\r\n                  secondary={chatDetails.status}\r\n                />\r\n              </ListItem>\r\n              <Stack direction={'row'}>\r\n                <IconButton aria-label=\"delete\">\r\n                  <IconPhone stroke={1.5} />\r\n                </IconButton>\r\n                <IconButton aria-label=\"delete\">\r\n                  <IconVideo stroke={1.5} />\r\n                </IconButton>\r\n                <IconButton aria-label=\"delete\" onClick={() => setOpen(!open)}>\r\n                  <IconDotsVertical stroke={1.5} />\r\n                </IconButton>\r\n              </Stack>\r\n            </Box>\r\n            <Divider />\r\n          </Box>\r\n          {/* ------------------------------------------- */}\r\n          {/* Chat Content */}\r\n          {/* ------------------------------------------- */}\r\n\r\n          <Box display=\"flex\">\r\n            {/* ------------------------------------------- */}\r\n            {/* Chat msges */}\r\n            {/* ------------------------------------------- */}\r\n\r\n            <Box width=\"100%\">\r\n              <Scrollbar sx={{ height: '650px', overflow: 'auto', maxHeight: '800px' }}>\r\n                <Box p={3}>\r\n                  {chatDetails.messages.map((chat) => {\r\n                    return (\r\n                      <Box key={chat.id + chat.msg + chat.createdAt}>\r\n                        {chatDetails.id === chat.senderId ? (\r\n                          <>\r\n                            <Box display=\"flex\">\r\n                              <ListItemAvatar>\r\n                                <Avatar\r\n                                  alt={chatDetails.name}\r\n                                  src={chatDetails.thumb}\r\n                                  sx={{ width: 40, height: 40 }}\r\n                                />\r\n                              </ListItemAvatar>\r\n                              <Box>\r\n                                {chat.createdAt ? (\r\n                                  <Typography variant=\"body2\" color=\"grey.400\" mb={1}>\r\n                                    {chatDetails.name},{' '}\r\n                                    {formatDistanceToNowStrict(new Date(chat.createdAt), {\r\n                                      addSuffix: false,\r\n                                    })}{' '}\r\n                                    ago\r\n                                  </Typography>\r\n                                ) : null}\r\n                                {chat.type === 'text' ? (\r\n                                  <Box\r\n                                    mb={2}\r\n                                    sx={{\r\n                                      p: 1,\r\n                                      backgroundColor: 'grey.100',\r\n                                      mr: 'auto',\r\n                                      maxWidth: '320px',\r\n                                    }}\r\n                                  >\r\n                                    {chat.msg}\r\n                                  </Box>\r\n                                ) : null}\r\n                                {chat.type === 'image' ? (\r\n                                  <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>\r\n                                    <img src={chat.msg} alt=\"attach\" width=\"150\" />\r\n                                  </Box>\r\n                                ) : null}\r\n                              </Box>\r\n                            </Box>\r\n                          </>\r\n                        ) : (\r\n                          <Box\r\n                            mb={1}\r\n                            display=\"flex\"\r\n                            alignItems=\"flex-end\"\r\n                            flexDirection=\"row-reverse\"\r\n                          >\r\n                            <Box alignItems=\"flex-end\" display=\"flex\" flexDirection={'column'}>\r\n                              {chat.createdAt ? (\r\n                                <Typography variant=\"body2\" color=\"grey.400\" mb={1}>\r\n                                  ago\r\n                                </Typography>\r\n                              ) : null}\r\n                              {chat.type === 'text' ? (\r\n                                <Box\r\n                                  mb={1}\r\n                                  key={chat.id}\r\n                                  sx={{\r\n                                    p: 1,\r\n                                    backgroundColor: 'primary.light',\r\n                                    ml: 'auto',\r\n                                    maxWidth: '320px',\r\n                                  }}\r\n                                >\r\n                                  {chat.msg}\r\n                                </Box>\r\n                              ) : null}\r\n                              {chat.type === 'image' ? (\r\n                                <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>\r\n                                  <img src={chat.msg} alt=\"attach\" width=\"250\" />\r\n                                </Box>\r\n                              ) : null}\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              </Scrollbar>\r\n            </Box>\r\n\r\n            {/* ------------------------------------------- */}\r\n            {/* Chat right sidebar Content */}\r\n            {/* ------------------------------------------- */}\r\n            <ChatInsideSidebar isInSidebar={lgUp ? open : !open} chat={chatDetails} />\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <Box display=\"flex\" alignItems=\"center\" p={2} pb={1} pt={1}>\r\n          {/* ------------------------------------------- */}\r\n          {/* if No Chat Content */}\r\n          {/* ------------------------------------------- */}\r\n          <Box\r\n            sx={{\r\n              display: { xs: 'flex', md: 'flex', lg: 'none' },\r\n              mr: '10px',\r\n            }}\r\n          >\r\n            <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />\r\n          </Box>\r\n          <Typography variant=\"h4\">Select Chat</Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatContent;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IconButton, InputBase, Box, Popover } from '@mui/material';\r\nimport Picker from 'emoji-picker-react';\r\nimport { IconMoodSmile, IconPaperclip, IconPhoto, IconSend } from '@tabler/icons';\r\nimport { sendMsg } from 'src/store/apps/chat/ChatSlice';\r\n\r\nconst ChatMsgSent = () => {\r\n  const [msg, setMsg] = React.useState('');\r\n  const dispatch = useDispatch();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [chosenEmoji, setChosenEmoji] = React.useState();\r\n\r\n  const onEmojiClick = (_event, emojiObject) => {\r\n    setChosenEmoji(emojiObject);\r\n    setMsg(emojiObject.emoji);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const id = useSelector((state) => state.chatReducer.chatContent);\r\n\r\n  const handleChatMsgChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const newMsg = { id, msg };\r\n\r\n  const onChatMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    dispatch(sendMsg(newMsg));\r\n    setMsg('');\r\n  };\r\n\r\n  return (\r\n    <Box p={2}>\r\n      {/* ------------------------------------------- */}\r\n      {/* sent chat */}\r\n      {/* ------------------------------------------- */}\r\n      <form\r\n        onSubmit={onChatMsgSubmit}\r\n        style={{ display: 'flex', gap: '10px', alignItems: 'center' }}\r\n      >\r\n        {/* ------------------------------------------- */}\r\n        {/* Emoji picker */}\r\n        {/* ------------------------------------------- */}\r\n        <IconButton\r\n          aria-label=\"more\"\r\n          id=\"long-button\"\r\n          aria-controls=\"long-menu\"\r\n          aria-expanded=\"true\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n        >\r\n          <IconMoodSmile />\r\n        </IconButton>\r\n        <Popover\r\n          id=\"long-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n          anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n          transformOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        >\r\n          <Picker onEmojiClick={onEmojiClick} native />\r\n          <Box p={2}>Selected: {chosenEmoji ? chosenEmoji.emoji : ''}</Box>\r\n        </Popover>\r\n        <InputBase\r\n          id=\"msg-sent\"\r\n          fullWidth\r\n          value={msg}\r\n          placeholder=\"Type a Message\"\r\n          size=\"small\"\r\n          type=\"text\"\r\n          inputProps={{ 'aria-label': 'Type a Message' }}\r\n          onChange={handleChatMsgChange.bind(null)}\r\n        />\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          onClick={() => {\r\n            dispatch(sendMsg(newMsg));\r\n            setMsg('');\r\n          }}\r\n          disabled={!msg}\r\n          color=\"primary\"\r\n        >\r\n          <IconSend stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n        <IconButton aria-label=\"delete\">\r\n          <IconPhoto stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n        <IconButton aria-label=\"delete\">\r\n          <IconPaperclip stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatMsgSent;\r\n","import React, { useState } from 'react';\r\nimport { Divider, Box } from '@mui/material';\r\nimport Breadcrumb from '../../../layouts/full/shared/breadcrumb/Breadcrumb';\r\nimport PageContainer from '../../../components/container/PageContainer';\r\nimport ChatSidebar from '../../../components/apps/chats/ChatSidebar';\r\nimport ChatContent from '../../../components/apps/chats/ChatContent';\r\nimport ChatMsgSent from '../../../components/apps/chats/ChatMsgSent';\r\nimport AppCard from 'src/components/shared/AppCard';\r\n\r\nconst Chats = () => {\r\n  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(false);\r\n\r\n  return (\r\n    <PageContainer title=\"Chat ui\" description=\"this is Chat page\">\r\n      <Breadcrumb title=\"Chat app\" subtitle=\"Messenger\" />\r\n      <AppCard>\r\n        {/* ------------------------------------------- */}\r\n        {/* Left part */}\r\n        {/* ------------------------------------------- */}\r\n\r\n        <ChatSidebar\r\n          isMobileSidebarOpen={isMobileSidebarOpen}\r\n          onSidebarClose={() => setMobileSidebarOpen(false)}\r\n        />\r\n        {/* ------------------------------------------- */}\r\n        {/* Right part */}\r\n        {/* ------------------------------------------- */}\r\n\r\n        <Box flexGrow={1}>\r\n          <ChatContent toggleChatSidebar={() => setMobileSidebarOpen(true)} />\r\n          <Divider />\r\n          <ChatMsgSent />\r\n        </Box>\r\n      </AppCard>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n"],"names":["_ref","title","description","children","_jsxs","Helmet","_jsx","name","content","SimpleBarStyle","styled","SimpleBar","maxHeight","backgroundColor","props","sx","other","test","navigator","userAgent","Box","overflowX","customizer","useSelector","state","Card","display","p","elevation","isCardShadow","variant","undefined","subtitle","items","Grid","container","borderRadius","theme","shape","marginBottom","position","overflow","item","xs","sm","lg","mb","Typography","color","fontWeight","mt","Breadcrumbs","separator","IconCircle","size","fill","fillOpacity","style","margin","alignItems","map","to","Link","underline","component","NavLink","md","justifyContent","width","top","_Fragment","src","breadcrumbImg","alt","ChatListing","dispatch","useDispatch","activeChat","chatReducer","chatContent","useEffect","fetchChats","chats","filterChats","cSearch","filter","t","toLocaleLowerCase","includes","chatSearch","getDetails","conversation","displayText","lastMessage","messages","length","sender","senderId","id","message","type","msg","concat","lastActivity","chat","_last","last","createdAt","anchorEl","setAnchorEl","React","open","Boolean","handleClose","gap","Badge","anchorOrigin","vertical","horizontal","overlap","Avatar","user1","height","px","py","TextField","placeholder","InputProps","endAdornment","InputAdornment","IconSearch","fullWidth","onChange","e","SearchChat","target","value","List","pb","Button","onClick","event","currentTarget","IconChevronDown","Menu","onClose","MenuListProps","MenuItem","Scrollbar","ListItemButton","SelectChat","selected","ListItemAvatar","status","thumb","ListItemText","primary","secondary","secondaryTypographyProps","noWrap","my","flexShrink","formatDistanceToNowStrict","Date","addSuffix","m","Alert","severity","isMobileSidebarOpen","onSidebarClose","lgUp","useMediaQuery","breakpoints","up","Drawer","zIndex","isInSidebar","totalAttachment","uniq","flatten","attachment","totalMedia","StyledStack","Stack","border","borderLeft","borderStyle","right","background","palette","paper","boxShadow","shadows","borderColor","divider","spacing","c","index","_c$attachment","direction","a","bgcolor","grey","icon","mr","file","fileSize","className","IconButton","IconDownload","stroke","toggleChatSidebar","setOpen","chatDetails","IconMenu2","ListItem","dense","disableGutters","IconPhone","IconVideo","IconDotsVertical","Divider","maxWidth","lineHeight","flexDirection","ml","ChatInsideSidebar","pt","ChatMsgSent","setMsg","chosenEmoji","setChosenEmoji","newMsg","onSubmit","preventDefault","stopPropagation","sendMsg","IconMoodSmile","Popover","keepMounted","transformOrigin","Picker","onEmojiClick","_event","emojiObject","emoji","native","InputBase","inputProps","bind","disabled","IconSend","IconPhoto","IconPaperclip","Chats","setMobileSidebarOpen","useState","PageContainer","Breadcrumb","AppCard","ChatSidebar","flexGrow","ChatContent"],"sourceRoot":""}